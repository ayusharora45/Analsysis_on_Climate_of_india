}else{
season=input$seasonal
gh=tb()
ggplot(gh,aes(x=gh[,'YEAR'],y=gh[,season]))+geom_bar(stat = 'identity',fill=fil(117))+xlab("Years(1901-2017)")
}
})
output$barannual=renderPlot({
if(input$climatetype=='rainfall'){
yearly=input$annual
subd3=input$subdiv
lh=tb() %>% filter(SUBDIVISION==subd3)
ggplot(lh,aes(x=lh[,'YEAR'],y=lh[,yearly]))+geom_bar(stat = 'identity',fill=fil(nrow(lh)))+xlab("Years(1901-2015)")
}else{
yearly=input$annual
lh=tb()
ggplot(lh,aes(x=lh[,'YEAR'],y=lh[,yearly]))+geom_bar(stat = 'identity',fill=fil(117))+xlab("Years(1901-2017)")
}
})
output$scattermonth=renderPlot({
if(input$climatetype2=='rainfall'){
monthly=input$month2
subd=input$subdiv2
lr=tb2() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,monthly]))+geom_point(color="blue")+xlab("Years(1901-2015)")+geom_smooth(se=F)
}else{
monthly=input$month2
lr=tb2()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,monthly]))+geom_point(color="blue")+xlab("Years(1901-2017)")+geom_smooth(se=F)
}
})
output$scatterseason=renderPlot({
if(input$climatetype2=='rainfall'){
season=input$seasonal2
subd=input$subdiv2
lr=tb2() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,season]))+geom_point(color="blue")+xlab("Years(1901-2015)")+geom_smooth(se=F)
}else{
season=input$seasonal2
lr=tb2()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,season]))+geom_point(color="blue")+xlab("Years(1901-2017)")+geom_smooth(se=F)
}
})
output$scatterannual=renderPlot({
if(input$climatetype2=='rainfall'){
ann=input$annual2
subd=input$subdiv2
lr=tb2() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,ann]))+geom_point(color="blue")+xlab("Years(1901-2015)")+geom_smooth(se=F)
}else{
ann=input$annual2
lr=tb2()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,ann]))+geom_point(color="blue")+xlab("Years(1901-2017)")+geom_smooth(se=F)
}
})
output$linemonth=renderPlot({
if(input$climatetype3=='rainfall'){
monthly=input$month3
subd=input$subdiv3
lr=tb3() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,monthly]))+geom_line(color="blue")+xlab("Years(1901-2015)")+geom_smooth(se=F)
}else{
monthly=input$month3
lr=tb3()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,monthly]))+geom_line(color="blue")+xlab("Years(1901-2017)")+geom_smooth(se=F)
}
})
output$lineseason=renderPlot({
if(input$climatetype3=='rainfall'){
season=input$seasonal3
subd=input$subdiv3
lr=tb3() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,season]))+geom_line(color="blue")+xlab("Years(1901-2015)")+geom_smooth(se=F)
}else{
season=input$seasonal3
lr=tb3()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,season]))+geom_line(color="blue")+xlab("Years(1901-2017)")+geom_smooth(se=F)
}
})
output$lineannual=renderPlot({
if(input$climatetype3=='rainfall'){
ann=input$annual3
subd=input$subdiv3
lr=tb3() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,ann]))+geom_line(color="blue")+xlab("Years(1901-2015)")+geom_smooth(se=F)
}else{
ann=input$annual3
lr=tb3()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,'YEAR'],y=lr[,ann]))+geom_line(color="blue")+xlab("Years(1901-2017)")+geom_smooth(se=F)
}
})
output$densitymonth=renderPlot({
if(input$climatetype4=='rainfall'){
subd=input$subdiv44
monthly=input$month4
lr=tb5() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,monthly]))+geom_density(stat = 'density',position = 'identity',na.rm = FALSE,col="green",fill="blue")
}else{
monthly=input$month4
lr=tb5()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,monthly]))+geom_density(stat = 'density',position = 'identity',na.rm = FALSE,col="green",fill="blue")
}
})
output$densityannual=renderPlot({
if(input$climatetype4=='rainfall'){
ann=input$annual4
subd=input$subdiv44
lr=tb5() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,ann]))+geom_density(stat = 'density',position = 'identity',na.rm = FALSE,col="green",fill="blue")
}else{
ann=input$annual4
lr=tb5()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,ann]))+geom_density(stat = 'density',position = 'identity',na.rm = FALSE,col="green",fill="blue")
}
})
output$densityseason=renderPlot({
if(input$climatetype4=='rainfall'){
season=input$seasonal4
subd=input$subdiv44
lr=tb5() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,season]),col="green")+geom_density(stat = 'density',position = 'identity',na.rm = FALSE,col="green",fill="blue")
}else{
season=input$seasonal4
lr=tb5()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,season]),col="green")+geom_density(stat = 'density',position = 'identity',na.rm = FALSE,col="green",fill="blue")
}
})
output$histomonth=renderPlot({
if(input$climatetype5=='rainfall'){
subd=input$subdiv5
monthly=input$month5
lr=tb6() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,monthly]))+geom_histogram(col="cadetblue",fill="red")
}else{
monthly=input$month5
lr=tb6()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,monthly]))+geom_histogram(col="cadetblue",fill="red")
}
})
output$histoannual=renderPlot({
if(input$climatetype5=='rainfall'){
ann=input$annual5
subd=input$subdiv5
lr=tb6() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,ann]))+geom_histogram(col="cadetblue",fill="red")
}else{
ann=input$annual5
lr=tb6()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(x=lr[,ann]))+geom_histogram(col="cadetblue",fill="red")
}
})
output$histoseason=renderPlot({
if(input$climatetype5=='rainfall'){
season=input$seasonal5
subd=input$subdiv5
lr=tb6() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(y=lr[,season]),col="green")+geom_histogram(col="cadetblue",fill="red")
}else{
season=input$seasonal5
lr=tb6()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(y=lr[,season]),col="green")+geom_histogram(col="cadetblue",fill="red")
}
})
output$boxmonth=renderPlot({
if(input$climatetype6=='rainfall'){
subd=input$subdiv6
monthly=input$month6
lr=tb7() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(y=lr[,monthly]))+geom_boxplot(col="cadetblue",fill="red")
}else{
monthly=input$month6
lr=tb7()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(y=lr[,monthly]))+geom_boxplot(col="cadetblue",fill="red")
}
})
output$boxannual=renderPlot({
if(input$climatetype6=='rainfall'){
ann=input$annual6
subd=input$subdiv6
lr=tb7() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(y=lr[,ann]))+geom_boxplot(col="cadetblue",fill="red")
}else{
ann=input$annual6
lr=tb7()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(y=lr[,ann]))+geom_boxplot(col="cadetblue",fill="red")
}
})
output$boxseason=renderPlot({
if(input$climatetype6=='rainfall'){
season=input$seasonal6
subd=input$subdiv6
lr=tb7() %>% filter(SUBDIVISION==subd)
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(y=lr[,season]),col="green")+geom_boxplot(col="cadetblue",fill="red")
}else{
season=input$seasonal6
lr=tb7()
fil=colorRampPalette(c("red","yellow","green"))
ggplot(lr,aes(y=lr[,season]),col="green")+geom_boxplot(col="cadetblue",fill="red")
}
})
output$summary1=renderPrint(
{
if(input$SI1>input$SI2){
(min_temp %>% filter(YEAR<=input$SI1 & YEAR>=input$SI2) %>% select(input$ch1))
}else{
(min_temp %>% filter(YEAR>=input$SI1 & YEAR<=input$SI2) %>% select(input$ch1))
}}
)
output$summary2=renderPrint(
{
if(input$SI1>input$SI2){
(mean_temp %>% filter(YEAR<=input$SI1 & YEAR>=input$SI2) %>% select(input$ch1))
}else{
(mean_temp %>% filter(YEAR>=input$SI1 & YEAR<=input$SI2) %>% select(input$ch1))
}}
)
output$summary3=renderPrint(
{
if(input$SI1>input$SI2){
(max_temp %>% filter(YEAR<=input$SI1 & YEAR>=input$SI2) %>% select(input$ch1))
}else{
(max_temp %>% filter(YEAR>=input$SI1 & YEAR<=input$SI2) %>% select(input$ch1))
}}
)
output$summary4=renderPrint(
{
if(input$SI1>input$SI2){
(min_temp %>% filter(YEAR<=input$SI1 & YEAR>=input$SI2) %>% select(as.integer(input$ch3)))
}else{
(min_temp %>% filter(YEAR>=input$SI1 & YEAR<=input$SI2) %>% select(as.integer(input$ch3)))
}}
)
output$summary5=renderPrint(
{
if(input$SI1>input$SI2){
(mean_temp %>% filter(YEAR<=input$SI1 & YEAR>=input$SI2) %>% select(as.integer(input$ch3)))
}else{
(mean_temp %>% filter(YEAR>=input$SI1 & YEAR<=input$SI2) %>% select(as.integer(input$ch3)))
}}
)
output$summary6=renderPrint(
{
if(input$SI1>input$SI2){
(max_temp %>% filter(YEAR<=input$SI1 & YEAR>=input$SI2) %>% select(as.integer(input$ch3)))
}else{
(max_temp %>% filter(YEAR>=input$SI1 & YEAR<=input$SI2) %>% select(as.integer(input$ch3)))
}}
)
}
shinyApp(ui,server)
dataset=c("Min Temperature for 117 years"="min_temp",
"Max Temperature for 117 years"="max_temp",
"Average Temperature for 117 years"="mean_temp",
"Rainfall for 115 years"="rainfall")
ui=dashboardPage(dashboardHeader(title = "Filtered"),
dashboardSidebar(
sidebarMenu(
menuItem(tabName = "filter",text="MORE...")
)
),
dashboardBody(tabItems(
tabItem(text="Want to ask Queries ? ",tabName = "filter",
tabsetPanel(tabPanel(
fluidRow(box(sliderInput(inputId = "selyear",label = "Select the range of years",
min=rainfall[1,2],max = rainfall[nrow(rainfall),2],value = c(min,max))),
box(sliderInput(inputId = "selmonth",label = "select the range of months",
min = 3,max=14,value = c(min,max))),
box(tableOutput("result"))
)
)
#                           tabPanel(fluidRow(box(sliderInput(inputId = "selyear2",label = "Select the Range of Years",
#                                                            min=rainfall[1,2],max = rainfall[nrow(rainfall),2],value=c(min,max)),
#                                               ),
#                                          box(sliderInput(inputId = "selmonth2",label = "Select the Range of months",
#                                                         min = 3,max = 14,value = c(min,max))),
#                                        box(sliderInput(inputId = "top10entries",label = "Select the no of entries you want to display",
#                                                       min = 1,max = 36,value = c(min,max))),
#                                      box(selectInput(inputId = "type",label = "Select Maximum or Minimum",choices=c("Max","Min"))),
#                                     box(tableOutput("result2"))))
) )))
)
server=function(input,output){
output$result=renderTable({
table1=rainfall %>% filter(YEAR>=input$selyear[1] & YEAR<=input$selyear[2]) %>% select(YEAR,SUBDIVISION,input$selmonth[1]:input$selmonth[2])
SUM=rowSums(table1[input$selmonth[1]:input$selmonth[2]])
table2=table1 %>% mutate(SUM=SUM)
table2=table2 %>% group_by(SUBDIVISION) %>% summarise(Sum=sum(SUM))
table2=table2 %>% filter(Sum==max(Sum))
table1 %>% filter(SUBDIVISION==table2$SUBDIVISION)
})
}
#})
shinyApp(ui,server)
ui=dashboardPage(dashboardHeader(title = "Filtered"),
dashboardSidebar(
sidebarMenu(
menuItem(tabName = "filter",text="MORE...")
)
),
dashboardBody(tabItems(
tabItem(text="Want to ask Queries ? ",tabName = "filter",
tabsetPanel(tabPanel(
fluidRow(box(sliderInput(inputId = "selyear",label = "Select the range of years",
min=rainfall[1,2],max = rainfall[nrow(rainfall),2],value = c(min,max))),
box(sliderInput(inputId = "selmonth",label = "select the range of months",
min = 3,max=14,value = c(min,max))),
box(tableOutput("result"))
)
)
#                           tabPanel(fluidRow(box(sliderInput(inputId = "selyear2",label = "Select the Range of Years",
#                                                            min=rainfall[1,2],max = rainfall[nrow(rainfall),2],value=c(min,max)),
#                                               ),
#                                          box(sliderInput(inputId = "selmonth2",label = "Select the Range of months",
#                                                         min = 3,max = 14,value = c(min,max))),
#                                        box(sliderInput(inputId = "top10entries",label = "Select the no of entries you want to display",
#                                                       min = 1,max = 36,value = c(min,max))),
#                                      box(selectInput(inputId = "type",label = "Select Maximum or Minimum",choices=c("Max","Min"))),
#                                     box(tableOutput("result2"))))
) )))
)
server=function(input,output){
output$result=renderTable({
table1=rainfall %>% filter(YEAR>=input$selyear[1] & YEAR<=input$selyear[2]) %>% select(YEAR,SUBDIVISION,input$selmonth[1]:input$selmonth[2])
SUM=rowSums(table1[input$selmonth[1]:input$selmonth[2]])
table2=table1 %>% mutate(Sum=SUM)
table2=table2 %>% group_by(SUBDIVISION) %>% summarise(Sum=sum(SUM))
table2=table2 %>% filter(Sum==max(Sum))
table1 %>% filter(SUBDIVISION==table2$SUBDIVISION)
})
}
#})
shinyApp(ui,server)
dataset=c("Min Temperature for 117 years"="min_temp",
"Max Temperature for 117 years"="max_temp",
"Average Temperature for 117 years"="mean_temp",
"Rainfall for 115 years"="rainfall")
ui=dashboardPage(dashboardHeader(title = "Filtered"),
dashboardSidebar(
sidebarMenu(
menuItem(tabName = "filter",text="MORE...")
)
),
dashboardBody(tabItems(
tabItem(text="Want to ask Queries ? ",tabName = "filter",
tabsetPanel(tabPanel(
fluidRow(box(sliderInput(inputId = "selyear",label = "Select the range of years",
min=rainfall[1,2],max = rainfall[nrow(rainfall),2],value = c(min,max))),
box(sliderInput(inputId = "selmonth",label = "select the range of months",
min = 3,max=14,value = c(min,max))),
box(tableOutput("result"))
)
)
#                           tabPanel(fluidRow(box(sliderInput(inputId = "selyear2",label = "Select the Range of Years",
#                                                            min=rainfall[1,2],max = rainfall[nrow(rainfall),2],value=c(min,max)),
#                                               ),
#                                          box(sliderInput(inputId = "selmonth2",label = "Select the Range of months",
#                                                         min = 3,max = 14,value = c(min,max))),
#                                        box(sliderInput(inputId = "top10entries",label = "Select the no of entries you want to display",
#                                                       min = 1,max = 36,value = c(min,max))),
#                                      box(selectInput(inputId = "type",label = "Select Maximum or Minimum",choices=c("Max","Min"))),
#                                     box(tableOutput("result2"))))
) )))
)
server=function(input,output){
output$result=renderTable({
table1=rainfall %>% filter(YEAR>=input$selyear[1] & YEAR<=input$selyear[2]) %>% select(YEAR,SUBDIVISION,input$selmonth[1]:input$selmonth[2])
ss=rowSums(table1[input$selmonth[1]:input$selmonth[2]])
table2=table1 %>% mutate(ss=ss)
table2=table2 %>% group_by(SUBDIVISION) %>% summarise(Sum=sum(ss))
table2=table2 %>% filter(Sum==max(Sum))
table1 %>% filter(SUBDIVISION==table2$SUBDIVISION)
})
}
#})
shinyApp(ui,server)
View(table1)
table1=rainfall %>% filter(YEAR>=input$selyear[1] & YEAR<=input$selyear[2]) %>% select(YEAR,SUBDIVISION,input$selmonth[1]:input$selmonth[2])
View(table1)
rainfall=read.csv("rainfall_area-wt_sd_1901-2015.csv")
mean_temp=read.csv("Mean_Temp_IMD_2017.csv")
min_temp=read.csv("Min_Temp_IMD_2017.csv")
max_temp=read.csv("Max_Temp_IMD_2017.csv")
cities=read.csv("GlobalLandTemperaturesByMajorCity.csv")
dataset=c("Min Temperature for 117 years"="min_temp",
"Max Temperature for 117 years"="max_temp",
"Average Temperature for 117 years"="mean_temp",
"Rainfall for 115 years"="rainfall")
ui=dashboardPage(dashboardHeader(title = "Filtered"),
dashboardSidebar(
sidebarMenu(
menuItem(tabName = "filter",text="MORE...")
)
),
dashboardBody(tabItems(
tabItem(text="Want to ask Queries ? ",tabName = "filter",
tabsetPanel(tabPanel(
fluidRow(box(sliderInput(inputId = "selyear",label = "Select the range of years",
min=rainfall[1,2],max = rainfall[nrow(rainfall),2],value = c(min,max))),
box(sliderInput(inputId = "selmonth",label = "select the range of months",
min = 3,max=14,value = c(min,max))),
box(tableOutput("result"))
)
)
#                           tabPanel(fluidRow(box(sliderInput(inputId = "selyear2",label = "Select the Range of Years",
#                                                            min=rainfall[1,2],max = rainfall[nrow(rainfall),2],value=c(min,max)),
#                                               ),
#                                          box(sliderInput(inputId = "selmonth2",label = "Select the Range of months",
#                                                         min = 3,max = 14,value = c(min,max))),
#                                        box(sliderInput(inputId = "top10entries",label = "Select the no of entries you want to display",
#                                                       min = 1,max = 36,value = c(min,max))),
#                                      box(selectInput(inputId = "type",label = "Select Maximum or Minimum",choices=c("Max","Min"))),
#                                     box(tableOutput("result2"))))
) )))
)
server=function(input,output){
output$result=renderTable({
table1=rainfall %>% filter(YEAR>=input$selyear[1] & YEAR<=input$selyear[2]) %>% select(YEAR,SUBDIVISION,input$selmonth[1]:input$selmonth[2])
SUM=rowSums(table1[input$selmonth[1]:input$selmonth[2]])
table2=table1 %>% mutate(SUM=SUM)
table2=table2 %>% group_by(SUBDIVISION) %>% summarise(Sum=sum(SUM))
table2=table2 %>% filter(Sum==max(Sum))
View(table1)
table1 %>% filter(SUBDIVISION==table2$SUBDIVISION)
})
}
#})
shinyApp(ui,server)
SUM
SUM
table2=table1 %>% mutate(SUM=SUM)
table1=rainfall %>% filter(YEAR>=input$selyear[1] & YEAR<=input$selyear[2]) %>% select(YEAR,SUBDIVISION,input$selmonth[1]:input$selmonth[2])
server=function(input,output){
output$result=renderTable({
table1=rainfall %>% filter(YEAR>=input$selyear[1] & YEAR<=input$selyear[2]) %>% select(YEAR,SUBDIVISION,input$selmonth[1]:input$selmonth[2])
SUM=rowSums(table1[input$selmonth[1]:input$selmonth[2]])
table2=table1 %>% mutate(SUM=SUM)
table2=table2 %>% group_by(SUBDIVISION) %>% summarise(Sum=sum(SUM))
table2=table2 %>% filter(Sum==max(Sum))
View(table1)
table1 %>% filter(SUBDIVISION==table2$SUBDIVISION)
})
}
#})
shinyApp(ui,server)
table2
ui=dashboardPage(dashboardHeader(title = "Filtered"),
dashboardSidebar(
sidebarMenu(
menuItem(tabName = "filter",text="MORE...")
)
),
dashboardBody(tabItems(
tabItem(text="Want to ask Queries ? ",tabName = "filter",
tabsetPanel(tabPanel(
fluidRow(box(sliderInput(inputId = "selyear",label = "Select the range of years",
min=rainfall[1,2],max = rainfall[nrow(rainfall),2],value = c(min,max))),
box(sliderInput(inputId = "selmonth",label = "select the range of months",
min = 3,max=14,value = c(min,max))),
box(tableOutput("result"))
)
)
#                           tabPanel(fluidRow(box(sliderInput(inputId = "selyear2",label = "Select the Range of Years",
#                                                            min=rainfall[1,2],max = rainfall[nrow(rainfall),2],value=c(min,max)),
#                                               ),
#                                          box(sliderInput(inputId = "selmonth2",label = "Select the Range of months",
#                                                         min = 3,max = 14,value = c(min,max))),
#                                        box(sliderInput(inputId = "top10entries",label = "Select the no of entries you want to display",
#                                                       min = 1,max = 36,value = c(min,max))),
#                                      box(selectInput(inputId = "type",label = "Select Maximum or Minimum",choices=c("Max","Min"))),
#                                     box(tableOutput("result2"))))
) )))
)
server=function(input,output){
output$result=renderTable({
table1=rainfall %>% filter(YEAR>=input$selyear[1] & YEAR<=input$selyear[2]) %>% select(YEAR,SUBDIVISION,input$selmonth[1]:input$selmonth[2])
SUM=rowSums(table1[input$selmonth[1]:input$selmonth[2]])
table2=table1 %>% mutate(SUM=SUM)
table2=table2 %>% group_by(SUBDIVISION) %>% summarise(Sum=sum(SUM))
table2=table2 %>% filter(Sum==max(Sum))
table1 %>% filter(SUBDIVISION==table2$SUBDIVISION)
})
}
#})
shinyApp(ui,server)
